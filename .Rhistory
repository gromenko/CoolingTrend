library(rJava)
library(RWeka)
install.packages("rJava")
Sys.setenv(LD_LIBRARY_PATH="/usr/lib/R/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-oracle/lib/amd64/server:/usr/lib/jvm/java-8-oracle/jre/lib/amd64/server/:@JAVA_LD@")
library(rJava)
library(rJava)
Sys.setenv(LD_LIBRARY_PATH="/usr/lib/R/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-oracle/lib/amd64/server:/usr/lib/jvm/java-8-oracle/jre/lib/amd64/server/:@JAVA_LD@")
library(rJava)
library(RWeka)
Sys.getenv("JAVA_HOME")
rm(list = ls())
library(parallel)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
rm(list = ls())
library(parallel)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
install.packages("rJava")
install.packages("rJava")
Sys.setenv(LD_LIBRARY_PATH="/usr/lib/R/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-oracle/lib/amd64/server:/usr/lib/jvm/java-8-oracle/jre/lib/amd64/server/:@JAVA_LD@")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.setenv(LD_LIBRARY_PATH="/usr/lib/R/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-oracle/lib/amd64/server:/usr/lib/jvm/java-8-oracle/jre/lib/amd64/server/:@JAVA_LD@")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rJava)
version
rm(list = ls())
library(parallel)
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
paste0(Sys.getenv("JAVA_HOME"),"/jre")
Sys.setenv(JAVA_HOME=paste0(Sys.getenv("JAVA_HOME"),"/jre"))
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.getenv("R_JAVA_LD_LIBRARY_PATH")
paste0(Sys.getenv("JAVA_HOME"), "/lib/amd64/server")
Sys.setenv(R_JAVA_LD_LIBRARY_PATH=paste0(Sys.getenv("JAVA_HOME"), "/lib/amd64/server"))
library(rJava)
install.packages("rJava")
Sys.setenv(R_JAVA_LD_LIBRARY_PATH=paste0(Sys.getenv("JAVA_HOME"), "/lib/amd64/server"))
library(rJava)
version
library(rJava)
Sys.setenv(LD_LIBRARY_PATH="/usr/lib/R/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-oracle/lib/amd64/server:/usr/lib/jvm/java-8-oracle/jre/lib/amd64/server/:@JAVA_LD@")
library(rJava)
library(RWeka)
library(RWeka)
library(rJava)
install.packages("rJava")
rm(list = ls())
library(parallel)
library(RWeka)
Sys.unsetenv("JAVA_HOME")
library(RWeka)
Sys.getenv("JAVA_HOME")
library(RWeka)
rm(list = ls())
setwd('~/Work/CoolingTrend/')
library(maps)
library(mapproj)
make_vert <- function(lat, y){
x <- c(rep(lat, length(y)));
lines(mapproject(list(x=c(x), y=c(y))), col=col, lwd=lwd)
}
make_hor <- function(lon, x){
y <- c(rep(lon, length(x)));
lines(mapproject(list(x=c(x), y=c(y))), col=col, lwd=lwd)
}
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
loc <- stations
data(worldMapEnv)
nrow(stations)
dts <- c()
for(i in 1958:2015){
for(j in 1:12){
dts <- c(dts, paste(i,ifelse(j < 10, paste0(0,j),j),'01', sep = '-'))
}}
count <- c()
for(ds in dts){
count <- c(count, length(which(data$DATE == ds)))
}
cnt.df <- data.frame(DATE = as.Date(dts), COUNT = count)
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT, type = 'l', xlab = NA, ylab = "Number of stations")
data$DATE <- as.Date(data$DATE)
range(data$FREQ)
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(3,17), type = 'n', ylab = "foF2, MHz")
fit <- lm(FREQ ~ F107, data = data)
data$PR <- predict(fit)
srf <- c()
for(dt in cnt.df$DATE){
tmp <- unique(data[data$DATE == dt,'PR'])
tmp <- ifelse(length(tmp) > 0, tmp, NA)
srf <- c(srf, tmp)
}
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'FREQ')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$FREQ, col = 'gray60')
}
lines(cnt.df$DATE, srf, lwd = 1.5)
a <- coef(summary(fit))[1,1]
b <- coef(summary(fit))[2,1]
x <- seq(0, 320, by = 50)
at = x * b + a
axis(4, at = at, labels = x)
mtext(expression("SRF, W/"~"m"^2~"/Hz"), side = 4, line = 2.5)
beta[1,1]
rm(list = ls()); gc()
setwd('~/Work/CoolingTrend/')
library(mgcv)
library(parallel)
source('code/functions2.R')
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
length(unique(data$CODE))
length(stations$CODE)
data$M = sin(data$I/180 * pi)*cos(data$I/180 * pi)
data <- data[!(data$YEAR %in% c(2014, 2015)),]
max.range = 2
fitted <- vector('list', 20)
data$INT <- 1
variables <- c("TREND", "F107", "H_NT", "INT")
fm <- paste0("FREQ~0+",paste0(variables, collapse = "+"))
fit.gam = glm(as.formula(fm), data = data)
data$RES = data$FREQ - predict(fit.gam, type = 'response')
for(iteration in 1:20){
byyear = by(data, data$YEAR, function(x) x)
covList <- mclapply(byyear, getSTCovariance, mc.cores = detectCores())
ln <- length(byyear)
ZMZ <- 0
ZY <- 0
for(i in 1:ln){
Sig       <- as.matrix(covList[[i]])
diag(Sig) <- mean(byyear[[i]]$RES^2)
SigI      <- solve(Sig)
Z <- byyear[[i]][,variables]
Z <- as.matrix(Z)
Y <- as.matrix(byyear[[i]][,c("FREQ")])
ZMZ <- ZMZ + t(Z) %*% SigI %*% Z
ZY  <- ZY  + t(Z) %*% SigI %*% Y
}
beta <- solve(ZMZ) %*% ZY
cat(beta, "\n")
fitted[[iteration]] <- beta
XX <- data[,variables]
data$RES <- data$FREQ - (as.matrix(XX) %*% beta)[,1]
cat(iteration,'\n')
gc()
for(i in 1:length(covList))
cat(i, " " ,try(is.na(covList[[i]][1,1])), "\n")
}
rm(list = ls()); gc()
setwd('~/Work/CoolingTrend/')
library(mgcv)
library(parallel)
source('code/functions2.R')
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
length(unique(data$CODE))
length(stations$CODE)
data$M = sin(data$I/180 * pi)*cos(data$I/180 * pi)
data <- data[!(data$YEAR %in% c(2014, 2015)),]
max.range = 2
fitted <- vector('list', 20)
data$INT <- 1
variables <- c("TREND", "F107", "H_NT", "INT")
fm <- paste0("FREQ~0+",paste0(variables, collapse = "+"))
fit.gam = glm(as.formula(fm), data = data)
data$RES = data$FREQ - predict(fit.gam, type = 'response')
data$RES
for(iteration in 1:20){
byyear = by(data, data$YEAR, function(x) x)
covList <- mclapply(byyear, getSTCovariance, mc.cores = detectCores())
ln <- length(byyear)
ZMZ <- 0
ZY <- 0
for(i in 1:ln){
Sig       <- as.matrix(covList[[i]])
diag(Sig) <- mean(byyear[[i]]$RES^2)
SigI      <- solve(Sig)
Z <- byyear[[i]][,variables]
Z <- as.matrix(Z)
Y <- as.matrix(byyear[[i]][,c("FREQ")])
ZMZ <- ZMZ + t(Z) %*% SigI %*% Z
ZY  <- ZY  + t(Z) %*% SigI %*% Y
}
beta <- solve(ZMZ) %*% ZY
cat(beta, "\n")
fitted[[iteration]] <- beta
XX <- data[,variables]
data$RES <- data$FREQ - (as.matrix(XX) %*% beta)[,1]
cat(iteration,'\n')
gc()
for(i in 1:length(covList))
cat(i, " " ,try(is.na(covList[[i]][1,1])), "\n")
}
byyear
byyear = by(data, data$YEAR, function(x) x)
covList <- mclapply(byyear, getSTCovariance, mc.cores = detectCores())
covList
rm(list = ls()); gc()
setwd('~/Work/CoolingTrend/')
library(mgcv)
library(parallel)
source('code/functions2.R')
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
length(unique(data$CODE))
length(stations$CODE)
data$M = sin(data$I/180 * pi)*cos(data$I/180 * pi)
data <- data[!(data$YEAR %in% c(2014, 2015)),]
max.range = 2
fitted <- vector('list', 20)
data$INT <- 1
variables <- c("TREND", "F107", "H_NT", "INT")
fm <- paste0("FREQ~0+",paste0(variables, collapse = "+"))
fit.gam = glm(as.formula(fm), data = data)
data$RES = data$FREQ - predict(fit.gam, type = 'response')
data$RES
rm(list = ls()); gc()
setwd('~/Work/CoolingTrend/')
library(mgcv)
library(parallel)
source('code/functions2.R')
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
length(unique(data$CODE))
length(stations$CODE)
data$M = sin(data$I/180 * pi)*cos(data$I/180 * pi)
data <- data[!(data$YEAR %in% c(2014, 2015)),]
max.range = 2
fitted <- vector('list', 20)
data$INT <- 1
variables <- c("TREND", "F107", "H_NT", "INT")
fm <- paste0("FREQ~0+",paste0(variables, collapse = "+"))
fit.gam = glm(as.formula(fm), data = data)
data$RES = data$FREQ - predict(fit.gam, type = 'response')
byyear = by(data, data$YEAR, function(x) x)
byyear
tmp = byyear[[33]]
prelim <- variog_est(tmp, stations, max.range = 2)
prelim
covarS <- fit_covariance(prelim$VARIOG, prelim$DIST.M)
covarS
covarT <- estimate_tempr(tmp, covarS$COVM)
covarT
len <- nrow(tmp)
len
covarST <- matrix(nc = len, nr = len, NA)
covarST
indc <- tmp$CODE
indt <- as.numeric(tmp$MONTH)
sg2 <- covarS$CO
for(i in 1:len){
for(j in i:len){
covarST[i,j] <- covarS$COVM[indc[i], indc[j]] * covarT[indt[i], indt[j]]
covarST[j,i] <- covarST[i,j]
}
}
diag(covarST) <- sg2
covarST
covList <- mclapply(byyear, function(x) {getSTCovariance(x,stations)}, mc.cores = detectCores())
covList
rm(list = ls()); gc()
setwd('~/Work/CoolingTrend/')
library(mgcv)
library(parallel)
source('code/functions2.R')
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
length(unique(data$CODE))
length(stations$CODE)
data$M = sin(data$I/180 * pi)*cos(data$I/180 * pi)
data <- data[!(data$YEAR %in% c(2014, 2015)),]
max.range = 2
fitted <- vector('list', 20)
data$INT <- 1
variables <- c("TREND", "F107", "H_NT", "INT")
fm <- paste0("FREQ~0+",paste0(variables, collapse = "+"))
fit.gam = glm(as.formula(fm), data = data)
data$RES = data$FREQ - predict(fit.gam, type = 'response')
for(iteration in 1:20){
byyear = by(data, data$YEAR, function(x) x)
covList <- mclapply(byyear, function(x) {getSTCovariance(x,stations)}, mc.cores = detectCores())
ln <- length(byyear)
ZMZ <- 0
ZY <- 0
for(i in 1:ln){
Sig       <- as.matrix(covList[[i]])
diag(Sig) <- mean(byyear[[i]]$RES^2)
SigI      <- solve(Sig)
Z <- byyear[[i]][,variables]
Z <- as.matrix(Z)
Y <- as.matrix(byyear[[i]][,c("FREQ")])
ZMZ <- ZMZ + t(Z) %*% SigI %*% Z
ZY  <- ZY  + t(Z) %*% SigI %*% Y
}
beta <- solve(ZMZ) %*% ZY
cat(beta, "\n")
fitted[[iteration]] <- beta
XX <- data[,variables]
data$RES <- data$FREQ - (as.matrix(XX) %*% beta)[,1]
cat(iteration,'\n')
gc()
for(i in 1:length(covList))
cat(i, " " ,try(is.na(covList[[i]][1,1])), "\n")
}
beta
t(beta)
write.table(t(beta), 'data/sample_est.txt', rownames = F, quote = F, sep = ",")
write.table(t(beta), 'data/sample_est.txt', row.names = F, quote = F, sep = ",")
sqrt(diag(solve(ZMZ)))
write.table(sqrt(diag(solve(ZMZ))), 'data/sample_sd.txt', row.names = F, quote = F, sep = ",")
beta[1,1] / sqrt(diag(solve(ZMZ)))[1]
plot.ts(sapply(fitted[1:20], function(x) x[1,1]))
write.table(t(sqrt(diag(solve(ZMZ)))), 'data/sample_sd.txt', row.names = F, quote = F, sep = ",")
rm(list = ls())
setwd('~/Work/CoolingTrend/')
library(maps)
library(mapproj)
make_vert <- function(lat, y){
x <- c(rep(lat, length(y)));
lines(mapproject(list(x=c(x), y=c(y))), col=col, lwd=lwd)
}
make_hor <- function(lon, x){
y <- c(rep(lon, length(x)));
lines(mapproject(list(x=c(x), y=c(y))), col=col, lwd=lwd)
}
stations <- read.table('data/IonoStations.txt', header = T, sep = '|', stringsAsFactors = F)
data <- read.csv('data/DATA_PROC.csv', header = T, stringsAsFactors = F)
#stations for research
stations<-stations[stations$LAT <= 60 & stations$LAT >= 30,]
nrow(stations)
data = data[data$CODE %in% stations$CODE,]
stations = stations[stations$CODE %in% data$CODE,]
loc <- stations
data(worldMapEnv)
nrow(stations)
dts <- c()
for(i in 1958:2015){
for(j in 1:12){
dts <- c(dts, paste(i,ifelse(j < 10, paste0(0,j),j),'01', sep = '-'))
}}
count <- c()
for(ds in dts){
count <- c(count, length(which(data$DATE == ds)))
}
cnt.df <- data.frame(DATE = as.Date(dts), COUNT = count)
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT, type = 'l', xlab = NA, ylab = "Number of stations")
data$DATE <- as.Date(data$DATE)
range(data$FREQ)
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(3,17), type = 'n', ylab = "foF2, MHz")
fit <- lm(FREQ ~ F107, data = data)
data$PR <- predict(fit)
srf <- c()
for(dt in cnt.df$DATE){
tmp <- unique(data[data$DATE == dt,'PR'])
tmp <- ifelse(length(tmp) > 0, tmp, NA)
srf <- c(srf, tmp)
}
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'FREQ')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$FREQ, col = 'gray60')
}
lines(cnt.df$DATE, srf, lwd = 1.5)
a <- coef(summary(fit))[1,1]
b <- coef(summary(fit))[2,1]
x <- seq(0, 320, by = 50)
at = x * b + a
axis(4, at = at, labels = x)
mtext(expression("SRF, W/"~"m"^2~"/Hz"), side = 4, line = 2.5)
est <- read.table('data/sample_est.txt', header = T, sep = ",")
est
data
data$F107 * est$F107 + est$INT + data$H_NT * est$H_NT
data$RES <- data$FREQ - (data$F107 * est$F107 + est$INT + data$H_NT * est$H_NT)
data$RES
par(mar = c(2,4,1,4))
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(-3,3), type = 'n', ylab = "foF2, MHz")
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$FREQ, col = 'gray60')
}
cnt.df
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(-4,4), type = 'n', ylab = "foF2, MHz")
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(-5,5), type = 'n', ylab = "foF2, MHz")
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
lines(cnt.df$DATE, srf, lwd = 1.5)
cnt.df$DATE, srf
abline(h = 0, lty = 5)
cnt.df$DATE
cnt.df$DATE
min(cnt.df$DATE)
cnt.df$DATE - min(cnt.df$DATE)
as.numeric(cnt.df$DATE - min(cnt.df$DATE))
est$TREND
lines(cnt.df$DATE, as.numeric(cnt.df$DATE - min(cnt.df$DATE)) * est$TREND, col = 'red')
lines(cnt.df$DATE, as.numeric(cnt.df$DATE - min(cnt.df$DATE)) * est$TREND, col = 'red', lwd = 1.5)
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(-5,5), type = 'n', ylab = "foF2, MHz")
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
abline(h = 0, lty = 'dotted')
lines(cnt.df$DATE, as.numeric(cnt.df$DATE - min(cnt.df$DATE)) * est$TREND, col = 1, lwd = 1.5)
esd <- read.table('data/sample_sd.txt', header = T, sep = ",")
esd
tm <- as.numeric(cnt.df$DATE - min(cnt.df$DATE))
tm
esd$TREND
lines(cnt.df$DATE, tmp * est$TREND + 2 * tmp * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
lines(cnt.df$DATE, tm * est$TREND + 2 * tmp * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
tm
tm * est$TREND
tm * esd$TREND
lines(cnt.df$DATE, tm * est$TREND + 2 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
lines(cnt.df$DATE, tm * est$TREND - 2 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
lines(cnt.df$DATE, tm * est$TREND + 3 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
lines(cnt.df$DATE, tm * est$TREND - 3 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
abline(h = 0, lty = 'dashed')
tm <- as.numeric(cnt.df$DATE - min(cnt.df$DATE))
postscript("figs/Data_Trend.eps", height=4, width=8)
par(mar = c(2,4,1,4))
plot(cnt.df$DATE, cnt.df$COUNT , ylim = c(-5,5), type = 'n', ylab = "foF2, MHz")
for(cd in unique( data$CODE )){
ind <- data$CODE == cd
tmp <- data[data$CODE == cd, c('DATE', 'RES')]
tmp <- merge(cnt.df, tmp, by = 'DATE', all.x = T)
lines(tmp$DATE, tmp$RES, col = 'gray60')
}
abline(h = 0, lty = 'dashed')
tm <- as.numeric(cnt.df$DATE - min(cnt.df$DATE))
lines(cnt.df$DATE, tm * est$TREND, col = 1, lwd = 1.5)
lines(cnt.df$DATE, tm * est$TREND + 3 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
lines(cnt.df$DATE, tm * est$TREND - 3 * tm * esd$TREND , col = 1, lwd = 1, lty = 'dotted')
dev.off()
